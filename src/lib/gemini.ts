import { 
  GoogleGenerativeAI, 
  GenerativeModel,
  HarmCategory, 
  HarmBlockThreshold,
  ChatSession
} from '@google/generative-ai';

// R√©cup√©rer la cl√© API Gemini depuis les variables d'environnement
const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY || '';

// V√©rifier que la cl√© API est disponible
if (!apiKey) {
  console.warn('Cl√© API Gemini non trouv√©e. Veuillez d√©finir NEXT_PUBLIC_GEMINI_API_KEY dans vos variables d\'environnement.');
}

// Initialiser le client Gemini
const genAI = new GoogleGenerativeAI(apiKey);

// Instruction syst√®me pour PharmaAI
const SYSTEM_INSTRUCTION = `Tu es PharmaAI, un assistant pharmaceutique intelligent con√ßu pour aider les utilisateurs avec des questions sur les m√©dicaments et la sant√©.

R√®gles importantes:
1. R√©ponds toujours en fran√ßais
2. Fournis des informations pr√©cises et factuelles sur les m√©dicaments
3. Ne donne jamais de conseils m√©dicaux personnalis√©s qui remplaceraient l'avis d'un m√©decin
4. Pour les questions hors de ton domaine, indique poliment que tu es sp√©cialis√© en information pharmaceutique
5. Sois empathique, professionnel et utile
6. Ne transmets pas d'informations potentiellement dangereuses sur le m√©susage des m√©dicaments
7. Si tu n'es pas s√ªr d'une information, admets-le clairement`;

// Configurer le mod√®le Gemini pour le chat
const modelConfig = {
  model: 'gemini-1.5-pro',
  generationConfig: {
    temperature: 0.7,
    topP: 0.9,
    topK: 16,
    maxOutputTokens: 2048,
  }
};

// Variables globales pour la gestion du chat
let model: GenerativeModel;
let chat: ChatSession | null = null;
let isGenerating = false;
let abortController: AbortController | null = null;

/**
 * Initialiser une nouvelle session de chat avec l'API Gemini
 */
export async function initChat(): Promise<void> {
  try {
    // Initialiser le mod√®le avec la configuration
    model = genAI.getGenerativeModel(modelConfig);
    
    // Cr√©er une nouvelle session de chat
    chat = model.startChat();
    
    // Envoyer le message initial pour configurer le comportement
    const result = await chat.sendMessage([
      {
        text: "Tu es PharmaAI, un assistant pharmaceutique intelligent qui r√©pond en fran√ßais et donne des informations pr√©cises sur les m√©dicaments."
      }
    ]);
    
    // V√©rifier que le chat a √©t√© cr√©√© avec succ√®s
    if (!chat || !result) {
      throw new Error('√âchec de l\'initialisation du chat');
    }
    
    console.log('Chat Gemini initialis√© avec succ√®s');
  } catch (error) {
    console.error('Erreur lors de l\'initialisation du chat Gemini:', error);
    throw error;
  }
}

/**
 * Envoyer un message √† l'API Gemini et g√©rer la r√©ponse
 */
export async function sendMessage(
  message: string,
  onPartialResponse?: (text: string) => void
): Promise<{ text: string; error?: string }> {
  if (!chat) {
    await initChat();
  }

  if (isGenerating) {
    return { text: '', error: 'Une g√©n√©ration est d√©j√† en cours' };
  }
  
  isGenerating = true;
  abortController = new AbortController();
  
  try {
    if (!chat) {
      throw new Error('Chat non initialis√©');
    }
    
    let fullResponse = '';
    const result = await chat.sendMessageStream(message);
    
    for await (const chunk of result.stream) {
      const chunkText = chunk.text();
      fullResponse += chunkText;
      
      if (onPartialResponse) {
        onPartialResponse(fullResponse);
      }
    }
    
    return { text: fullResponse };
  } catch (error: any) {
    console.error('Erreur lors de l\'envoi du message:', error);
    
    if (error.name === 'AbortError') {
      return { text: '', error: 'G√©n√©ration annul√©e' };
    }
    
    return { text: '', error: error.message || 'Une erreur est survenue' };
  } finally {
    isGenerating = false;
    abortController = null;
  }
}

/**
 * Annuler une g√©n√©ration en cours
 */
export function cancelGeneration(): void {
  if (abortController) {
    abortController.abort();
    abortController = null;
  }
  
  isGenerating = false;
  console.log('G√©n√©ration annul√©e');
}

// Fonction pour analyser une image et obtenir des informations sur un m√©dicament
export async function analyserImageMedicament(imageBase64: string): Promise<string> {
  try {
    console.log("üîç D√©but de l'analyse de l'image...");

    if (!apiKey) {
      return "‚ùå Erreur : Aucune cl√© API Gemini n'a √©t√© configur√©e. Veuillez ajouter votre cl√© API dans le fichier .env.local";
    }

    if (!imageBase64) {
      return "‚ùå Erreur : Aucune image n'a √©t√© fournie";
    }

    // Traitement du base64
    let base64Image = imageBase64;
    if (imageBase64.includes('data:image')) {
      const parts = imageBase64.split(',');
      if (parts.length > 1) {
        base64Image = parts[1];
      }
    }

    console.log("üìè Taille de l'image:", base64Image.length, "caract√®res");

    // V√©rification de la taille de l'image
    if (base64Image.length > 5000000) {
      return "‚ùå Erreur : L'image est trop volumineuse. Veuillez utiliser une image plus petite.";
    }

    // V√©rification de la validit√© du base64
    try {
      atob(base64Image);
    } catch (e) {
      return "‚ùå Erreur : L'image fournie n'est pas dans un format valide";
    }

    console.log("‚úÖ Image valid√©e, initialisation du mod√®le Gemini...");

    // Initialiser le mod√®le avec des configurations appropri√©es
    const model = genAI.getGenerativeModel({ 
      model: "gemini-1.5-pro",
      generationConfig: {
        temperature: 0.2,
        topK: 32,
        topP: 0.95,
        maxOutputTokens: 1500,
      }
    });

    // Cr√©ation de la partie image
    const imagePart = {
      inlineData: {
        mimeType: "image/jpeg",
        data: base64Image
      }
    };

    // Cr√©ation du prompt enrichi pour plus d'informations
    const prompt = `Tu es un pharmacien expert. Identifie ce m√©dicament √† partir de l'image et fais une analyse COMPL√àTE avec toutes les informations m√©dicales importantes.

Pour les informations qui ne sont pas visibles sur l'image, utilise tes connaissances pharmaceutiques pour compl√©ter avec les informations EXACTES et PR√âCISES pour ce m√©dicament sp√©cifique. Ne laisse AUCUNE information manquante.

Pr√©sente les r√©sultats dans ce format tableau:

| Nom commercial | [nom exact du m√©dicament] |
| Laboratoire | [nom du fabricant/laboratoire] |
| Principes actifs | [tous les principes actifs avec leurs dosages pr√©cis] |
| Forme gal√©nique | [comprim√©, g√©lule, solution, etc.] |
| Indications | [liste compl√®te des indications th√©rapeutiques] |
| Posologie | [posologie d√©taill√©e pour diff√©rents cas] |
| Effets secondaires | [effets secondaires fr√©quents et graves] |
| Contre-indications | [toutes les contre-indications importantes] |
| Interactions | [interactions m√©dicamenteuses principales] |
| Conservation | [conditions de conservation] |
| Classification | [classe th√©rapeutique et pharmacologique] |
| Prix approximatif | [prix moyen en pharmacie] |

Si tu ne peux pas identifier le m√©dicament avec certitude, fais une estimation √©ducative en te basant sur ses caract√©ristiques visuelles, mais √âVITE de mentionner tout doute dans ta r√©ponse finale.

R√©ponds uniquement en fran√ßais et assure-toi que TOUTES les informations sont fournies pour chaque cat√©gorie.`;

    console.log("üöÄ Envoi de la requ√™te √† l'API Gemini...");

    try {
      const result = await model.generateContent([
        { text: prompt },
        imagePart
      ]);

      console.log("üì• R√©ponse re√ßue de l'API Gemini");

      if (!result || !result.response) {
        return "‚ùå Erreur : Aucune r√©ponse n'a √©t√© re√ßue de l'API";
      }

      const text = result.response.text();
      if (!text) {
        return "‚ùå Erreur : La r√©ponse re√ßue est vide";
      }

      console.log("‚ú® Analyse termin√©e avec succ√®s");
      console.log("D√©but de la r√©ponse:", text.substring(0, 50) + "...");
      return text;

    } catch (apiError: any) {
      console.error("Erreur API d√©taill√©e:", apiError);
      
      // V√©rification des erreurs sp√©cifiques √† l'API
      if (apiError.message?.includes("SAFETY")) {
        return "‚ùå Erreur : Le contenu a √©t√© bloqu√© pour des raisons de s√©curit√©. Veuillez utiliser une image de m√©dicament.";
      }
      
      if (apiError.message?.includes("quota")) {
        return "‚ùå Erreur : Quota d'API d√©pass√©. Veuillez r√©essayer plus tard.";
      }
      
      if (apiError.message?.includes("invalid")) {
        return "‚ùå Erreur : Requ√™te invalide. Veuillez v√©rifier le format de l'image.";
      }
      
      if (apiError.message?.includes("Not Found")) {
        return "‚ùå Erreur : Le mod√®le d'IA n'est pas disponible. Veuillez contacter l'administrateur du site.";
      }
      
      return `‚ùå Erreur lors de l'appel √† l'API: ${apiError.message}`;
    }

  } catch (error: any) {
    console.error("‚ùå Erreur d√©taill√©e:", error);
    
    // Log complet de l'erreur pour le d√©bogage
    console.error("Erreur compl√®te:", {
      message: error.message,
      stack: error.stack,
      name: error.name
    });

    return "‚ùå Une erreur s'est produite lors de l'analyse. Veuillez v√©rifier que l'image est claire et r√©essayer.";
  }
} 