import { supabase } from './config'
import { SupabaseAnalyse, DetailsMedicament } from './config'

// Interface pour cr√©er une nouvelle analyse
export interface CreateAnalyseData {
  nom: string
  description?: string
  image_url?: string
  details_analyse?: DetailsMedicament
}

// Interface pour mettre √† jour une analyse
export interface UpdateAnalyseData {
  nom?: string
  description?: string
  image_url?: string
  details_analyse?: DetailsMedicament
}

/**
 * Service de gestion des analyses de m√©dicaments
 */
export class AnalysesService {
  /**
   * Sauvegarder une nouvelle analyse
   */
  static async saveAnalyse(analyseData: CreateAnalyseData): Promise<string | null> {
    try {
      console.log('üîÑ D√©but de la sauvegarde de l\'analyse...')
      
      // V√©rifier que l'utilisateur est authentifi√©
      const { data: { user }, error: userError } = await supabase.auth.getUser()
      
      if (userError) {
        console.error('‚ùå Erreur d\'authentification:', userError)
        throw new Error(`Erreur d'authentification: ${userError.message}`)
      }
      
      if (!user) {
        console.error('‚ùå Utilisateur non authentifi√©')
        throw new Error('Utilisateur non authentifi√©')
      }

      console.log('‚úÖ Utilisateur authentifi√©:', user.id)

      // Pr√©parer les donn√©es pour l'insertion
      const dataToInsert = {
        user_id: user.id,
        nom: analyseData.nom,
        description: analyseData.description,
        image_url: analyseData.image_url,
        details_analyse: analyseData.details_analyse,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }

      console.log('üìä Donn√©es √† ins√©rer:', dataToInsert)

      // Ins√©rer dans la base de donn√©es
      const { data, error } = await supabase
        .from('analyses')
        .insert(dataToInsert)
        .select()
        .single()

      if (error) {
        console.error('‚ùå Erreur lors de l\'insertion:', error)
        console.error('‚ùå Code d\'erreur:', error.code)
        console.error('‚ùå Message d\'erreur:', error.message)
        console.error('‚ùå D√©tails complets:', JSON.stringify(error, null, 2))
        throw error
      }

      console.log('‚úÖ Analyse sauvegard√©e avec succ√®s:', data.id)
      return data.id
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la sauvegarde de l\'analyse:', error)
      throw error
    }
  }

  /**
   * R√©cup√©rer les analyses r√©centes d'un utilisateur
   */
  static async getRecentAnalyses(limit = 10): Promise<SupabaseAnalyse[]> {
    try {
      // V√©rifier que l'utilisateur est authentifi√©
      const { data: { user } } = await supabase.auth.getUser()
      
      if (!user) {
        throw new Error('Utilisateur non authentifi√©')
      }

      // R√©cup√©rer les analyses de l'utilisateur
      const { data, error } = await supabase
        .from('analyses')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false })
        .limit(limit)

      if (error) {
        throw error
      }

      // Mapper details_analyse vers detailsAnalyse pour compatibilit√©
      return (data || []).map(analyse => ({
        ...analyse,
        detailsAnalyse: analyse.details_analyse
      }))
    } catch (error: any) {
      console.error('Erreur lors de la r√©cup√©ration des analyses:', error)
      return []
    }
  }

  /**
   * R√©cup√©rer toutes les analyses d'un utilisateur
   */
  static async getUserAnalyses(userId?: string): Promise<SupabaseAnalyse[]> {
    try {
      let targetUserId = userId

      // Si aucun userId fourni, utiliser l'utilisateur actuel
      if (!targetUserId) {
        const { data: { user } } = await supabase.auth.getUser()
        if (!user) {
          throw new Error('Utilisateur non authentifi√©')
        }
        targetUserId = user.id
      }

      // R√©cup√©rer toutes les analyses de l'utilisateur
      const { data, error } = await supabase
        .from('analyses')
        .select('*')
        .eq('user_id', targetUserId)
        .order('created_at', { ascending: false })

      if (error) {
        throw error
      }

      // Mapper details_analyse vers detailsAnalyse pour compatibilit√©
      return (data || []).map(analyse => ({
        ...analyse,
        detailsAnalyse: analyse.details_analyse
      }))
    } catch (error: any) {
      console.error('Erreur lors de la r√©cup√©ration des analyses:', error)
      throw error
    }
  }

  /**
   * R√©cup√©rer une analyse par son ID
   */
  static async getAnalyseById(analyseId: string): Promise<SupabaseAnalyse | null> {
    try {
      // V√©rifier que l'utilisateur est authentifi√©
      const { data: { user } } = await supabase.auth.getUser()
      
      if (!user) {
        throw new Error('Utilisateur non authentifi√©')
      }

      // R√©cup√©rer l'analyse
      const { data, error } = await supabase
        .from('analyses')
        .select('*')
        .eq('id', analyseId)
        .eq('user_id', user.id) // S'assurer que l'utilisateur peut acc√©der √† cette analyse
        .single()

      if (error) {
        if (error.code === 'PGRST116') {
          return null // Analyse non trouv√©e
        }
        throw error
      }

      return data
    } catch (error: any) {
      console.error('Erreur lors de la r√©cup√©ration de l\'analyse:', error)
      throw error
    }
  }

  /**
   * Mettre √† jour une analyse existante
   */
  static async updateAnalyse(analyseId: string, updateData: UpdateAnalyseData): Promise<void> {
    try {
      // V√©rifier que l'utilisateur est authentifi√©
      const { data: { user } } = await supabase.auth.getUser()
      
      if (!user) {
        throw new Error('Utilisateur non authentifi√©')
      }

      // Pr√©parer les donn√©es de mise √† jour
      const dataToUpdate = {
        ...updateData,
        updated_at: new Date().toISOString()
      }

      // Mettre √† jour l'analyse
      const { error } = await supabase
        .from('analyses')
        .update(dataToUpdate)
        .eq('id', analyseId)
        .eq('user_id', user.id) // S'assurer que l'utilisateur peut modifier cette analyse

      if (error) {
        throw error
      }
    } catch (error: any) {
      console.error('Erreur lors de la mise √† jour de l\'analyse:', error)
      throw error
    }
  }

  /**
   * Supprimer une analyse
   */
  static async deleteAnalyse(analyseId: string): Promise<void> {
    try {
      // V√©rifier que l'utilisateur est authentifi√©
      const { data: { user } } = await supabase.auth.getUser()
      
      if (!user) {
        throw new Error('Utilisateur non authentifi√©')
      }

      // Supprimer l'analyse
      const { error } = await supabase
        .from('analyses')
        .delete()
        .eq('id', analyseId)
        .eq('user_id', user.id) // S'assurer que l'utilisateur peut supprimer cette analyse

      if (error) {
        throw error
      }
    } catch (error: any) {
      console.error('Erreur lors de la suppression de l\'analyse:', error)
      throw error
    }
  }

  /**
   * Compter le nombre d'analyses d'un utilisateur
   */
  static async getAnalysesCount(userId?: string): Promise<number> {
    try {
      let targetUserId = userId

      // Si aucun userId fourni, utiliser l'utilisateur actuel
      if (!targetUserId) {
        const { data: { user } } = await supabase.auth.getUser()
        if (!user) {
          throw new Error('Utilisateur non authentifi√©')
        }
        targetUserId = user.id
      }

      // Compter les analyses
      const { count, error } = await supabase
        .from('analyses')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', targetUserId)

      if (error) {
        throw error
      }

      return count || 0
    } catch (error: any) {
      console.error('Erreur lors du comptage des analyses:', error)
      return 0
    }
  }
}

// Export par d√©faut
export default AnalysesService

// Export des fonctions individuelles pour la compatibilit√©
export const saveAnalyse = AnalysesService.saveAnalyse
export const getRecentAnalyses = AnalysesService.getRecentAnalyses
export const getUserAnalyses = AnalysesService.getUserAnalyses
export const getAnalyseById = AnalysesService.getAnalyseById
export const updateAnalyse = AnalysesService.updateAnalyse
export const deleteAnalyse = AnalysesService.deleteAnalyse
export const getAnalysesCount = AnalysesService.getAnalysesCount
